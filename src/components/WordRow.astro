---
import WordHover from "./WordHover.astro";
import wordsJson from "./words.json";
import WordSpan from "./WordSpan.astro";
import { fix, type Word, type mapType } from "./util.tsx";

const words = wordsJson as mapType;

interface Props {
    word: string;
}

const { word } = Astro.props;

const wordData: Word | undefined = words[word.toLowerCase()];
---

<tr class="wordRow">
    <td>
        <WordSpan word={wordData?.caps || word} wordAudio={wordData?.audio} />
    </td>
    {
        wordData ? (
            Object.entries(wordData).map(([key, value]) => {
                if (key === "audio" || key === "note" || key === "caps") {
                    return null;
                }

                if (key === "en" && wordData.note) {
                    return (
                        <td>
                            <WordHover word={`${value}`} hoverText={wordData.note} />
                        </td>
                    );
                }

                if (key === "phon") {
                    return (
                        <td>
                            [<Fragment set:html={`${fix(value)}`} />]
                        </td>
                    );
                }

                return <td>{value}</td>;
            })
        ) : (
            <p style="color:red">{word} not found.</p>
        )
    }
</tr>
